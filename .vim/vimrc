" ---------------------------------------------------------------
" Basics                                                     {{{
" ---------------------------------------------------------------

syntax enable

" Charset
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac
inoremap <silent> jj <ESC>

" Enable delete line by <C-h>
set backspace=2
set cursorline

" Enable number of line
set number

" Searching
set hlsearch
set ignorecase
set smartcase
set incsearch

" Tab
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set showtabline=2

" Indent
set smartindent

" Enable yanked line to clipboard
set clipboard+=unnamed

set laststatus=2

" Disable auto create .swp file
set noswapfile

" Remove white space end of line
autocmd BufWritePre * :%s/\s\+$//ge

set virtualedit=block

" Enable displaying complemention code when command mode.
set wildmenu

" Enable using mouse
set mouse=a

" Set fish terminal when terminal mode
set sh=fish

" Set <Leader>
let mapleader = "\<Space>"

" Enable saving history for Undo / Redo procedure
if has('persistent_undo')
  let undo_path = expand('~/.vim/undo')
  exe 'set undodir=' . undo_path
  set undofile
endif

if (has("termguicolors"))
  set termguicolors
endif

" ---------------------------------------------------------------
" Plugins                                                     {{{
" ---------------------------------------------------------------


let g:fzf_command_path = '/usr/local/bin/fzf'


call plug#begin('~/.vim/plugged')

" Display  ----------------------------
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'mhinz/vim-startify'
Plug 'joshdick/onedark.vim'

" Markdown ----------------------------
Plug 'junegunn/goyo.vim'
Plug 'previm/previm'

" Coding ------------------------------
Plug 'Yggdroot/indentLine'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'w0rp/ale'
Plug 'slim-template/vim-slim'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-endwise'
Plug 'cohama/lexima.vim'
Plug 'nicwest/vim-camelsnek'

" Git ---------------------------------
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-jp/vital.vim'
Plug 'iberianpig/tig-explorer.vim'

" Fuzzy finder ------------------------
Plug fzf_command_path
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'cat2koban/ghlink.vim'

call plug#end()

let s:plugs = get(s:, 'plugs', get(g:, 'plugs', {}))
function! FindPlugin(name) abort
  return has_key(s:plugs, a:name) ? isdirectory(s:plugs[a:name].dir) : 0
endfunction
command! -nargs=1 UsePlugin if !FindPlugin(<args>) | finish | endif

augroup MyCocExplorer
  autocmd!
  autocmd VimEnter * sil! au! FileExplorer *
  autocmd BufEnter * let d = expand('%') | if isdirectory(d) | silent! bd | exe 'CocCommand explorer ' . d | endif
augroup END

runtime! rc/*.vim
